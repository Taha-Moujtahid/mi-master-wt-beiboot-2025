/**
 * Beiboot API
 * API documentation for Beiboot
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ProjectsApi", () => {
  let instance: api.ProjectsApi
  beforeEach(function() {
    instance = new api.ProjectsApi(config)
  });

  test("projectsControllerCreateProject", () => {
    return expect(instance.projectsControllerCreateProject({})).resolves.toBe(null)
  })
  test("projectsControllerDeleteImage", () => {
    const projectId: string = "projectId_example"
    const imageId: string = "imageId_example"
    return expect(instance.projectsControllerDeleteImage(projectId, imageId, {})).resolves.toBe(null)
  })
  test("projectsControllerGetImageMetadata", () => {
    const projectId: string = "projectId_example"
    const imageId: string = "imageId_example"
    return expect(instance.projectsControllerGetImageMetadata(projectId, imageId, {})).resolves.toBe(null)
  })
  test("projectsControllerGetProjectImages", () => {
    const projectId: string = "projectId_example"
    return expect(instance.projectsControllerGetProjectImages(projectId, {})).resolves.toBe(null)
  })
  test("projectsControllerGetProjects", () => {
    return expect(instance.projectsControllerGetProjects({})).resolves.toBe(null)
  })
  test("projectsControllerGetPublicProjects", () => {
    return expect(instance.projectsControllerGetPublicProjects({})).resolves.toBe(null)
  })
  test("projectsControllerSetImageMetadata", () => {
    const projectId: string = "projectId_example"
    const imageId: string = "imageId_example"
    return expect(instance.projectsControllerSetImageMetadata(projectId, imageId, {})).resolves.toBe(null)
  })
  test("projectsControllerUpdateImage", () => {
    const projectId: string = "projectId_example"
    const imageId: string = "imageId_example"
    return expect(instance.projectsControllerUpdateImage(projectId, imageId, {})).resolves.toBe(null)
  })
  test("projectsControllerUpdateProject", () => {
    return expect(instance.projectsControllerUpdateProject({})).resolves.toBe(null)
  })
  test("projectsControllerUploadImages", () => {
    const projectId: string = "projectId_example"
    return expect(instance.projectsControllerUploadImages(projectId, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("usersControllerGetProfile", () => {
    return expect(instance.usersControllerGetProfile({})).resolves.toBe(null)
  })
})

